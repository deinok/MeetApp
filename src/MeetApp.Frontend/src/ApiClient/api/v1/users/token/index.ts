/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTokenResponseErrorFromDiscriminatorValue, createTokenResponseFromDiscriminatorValue, serializeTokenResponse, type TokenResponse, type TokenResponseError } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TokenPostRequestBody}
 */
// @ts-ignore
export function createTokenPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTokenPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTokenPostRequestBody(tokenPostRequestBody: Partial<TokenPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "client_id": n => { tokenPostRequestBody.clientId = n.getStringValue(); },
        "client_secret": n => { tokenPostRequestBody.clientSecret = n.getStringValue(); },
        "grant_type": n => { tokenPostRequestBody.grantType = n.getStringValue(); },
        "password": n => { tokenPostRequestBody.password = n.getStringValue(); },
        "scope": n => { tokenPostRequestBody.scope = n.getStringValue(); },
        "username": n => { tokenPostRequestBody.username = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTokenPostRequestBody(writer: SerializationWriter, tokenPostRequestBody: Partial<TokenPostRequestBody> | undefined | null = {}) : void {
    if (tokenPostRequestBody) {
        writer.writeStringValue("client_id", tokenPostRequestBody.clientId);
        writer.writeStringValue("client_secret", tokenPostRequestBody.clientSecret);
        writer.writeStringValue("grant_type", tokenPostRequestBody.grantType);
        writer.writeStringValue("password", tokenPostRequestBody.password);
        writer.writeStringValue("scope", tokenPostRequestBody.scope);
        writer.writeStringValue("username", tokenPostRequestBody.username);
        writer.writeAdditionalData(tokenPostRequestBody.additionalData);
    }
}
export interface TokenPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The client_id property
     */
    clientId?: string | null;
    /**
     * The client_secret property
     */
    clientSecret?: string | null;
    /**
     * The grant_type property
     */
    grantType?: string | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The scope property
     */
    scope?: string | null;
    /**
     * The username property
     */
    username?: string | null;
}
/**
 * Builds and executes requests for operations under /api/v1/users/token
 */
export interface TokenRequestBuilder extends BaseRequestBuilder<TokenRequestBuilder> {
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TokenResponse>}
     * @throws {TokenResponseError} error when the service returns a 400 status code
     * @throws {TokenResponseError} error when the service returns a 401 status code
     */
     post(body: TokenPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TokenResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TokenPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TokenRequestBuilderUriTemplate = "{+baseurl}/api/v1/users/token";
/**
 * Metadata for all the requests in the request builder.
 */
export const TokenRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: TokenRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createTokenResponseErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createTokenResponseErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTokenResponseFromDiscriminatorValue,
        requestBodyContentType: "application/x-www-form-urlencoded",
        requestBodySerializer: serializeTokenPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
