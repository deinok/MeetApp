/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProblemDetailsFromDiscriminatorValue, type ProblemDetails } from '../../../models/index.js';
// @ts-ignore
import { BussinesTypeRequestBuilderRequestsMetadata, type BussinesTypeRequestBuilder } from './bussinesType/index.js';
// @ts-ignore
import { RegistrationRequestBuilderRequestsMetadata, type RegistrationRequestBuilder } from './registration/index.js';
// @ts-ignore
import { TokenRequestBuilderRequestsMetadata, type TokenRequestBuilder } from './token/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';
// @ts-ignore
import { type Guid } from 'guid-typescript';

/**
 * Builds and executes requests for operations under /api/v1/users
 */
export interface UsersRequestBuilder extends BaseRequestBuilder<UsersRequestBuilder> {
    /**
     * The bussinesType property
     */
    get bussinesType(): BussinesTypeRequestBuilder;
    /**
     * The registration property
     */
    get registration(): RegistrationRequestBuilder;
    /**
     * The token property
     */
    get token(): TokenRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Guid[]>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     * @throws {ProblemDetails} error when the service returns a 401 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Guid[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UsersRequestBuilderUriTemplate = "{+baseurl}/api/v1/users";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UsersRequestBuilderNavigationMetadata: Record<Exclude<keyof UsersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bussinesType: {
        requestsMetadata: BussinesTypeRequestBuilderRequestsMetadata,
    },
    registration: {
        requestsMetadata: RegistrationRequestBuilderRequestsMetadata,
    },
    token: {
        requestsMetadata: TokenRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UsersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UsersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createGuidFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
