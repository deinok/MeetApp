/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTextTranslationResponseFromDiscriminatorValue, serializeTextTranslationRequest, serializeTextTranslationResponse, type TextTranslationRequest, type TextTranslationResponse } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v1/text-translation
 */
export interface TextTranslationRequestBuilder extends BaseRequestBuilder<TextTranslationRequestBuilder> {
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TextTranslationResponse>}
     * @throws {TextTranslationResponse} error when the service returns a 400 status code
     */
     get(body: TextTranslationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TextTranslationResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(body: TextTranslationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TextTranslationRequestBuilderUriTemplate = "{+baseurl}/api/v1/text-translation";
/**
 * Metadata for all the requests in the request builder.
 */
export const TextTranslationRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TextTranslationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createTextTranslationResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTextTranslationResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTextTranslationRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
